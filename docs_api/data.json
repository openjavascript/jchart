{
    "project": {
        "name": "JChart",
        "description": "javascript chart",
        "version": "0.2",
        "url": "http://jchart.openjavascript/",
        "logo": "jc_logo.png"
    },
    "files": {
        "../modules/JChart.BaseMVC/0.1/BaseMVC.js": {
            "name": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "modules": {},
            "classes": {
                "JChart.BaseMVC": 1
            },
            "fors": {},
            "namespaces": {
                "JChart": 1
            }
        },
        "../modules/JChart.Line/0.1/Line.js": {
            "name": "../modules/JChart.Line/0.1/Line.js",
            "modules": {},
            "classes": {
                "JChart.Line": 1
            },
            "fors": {},
            "namespaces": {
                "JChart": 1
            }
        },
        "../modules/JChart.common/0.1/common.js": {
            "name": "../modules/JChart.common/0.1/common.js",
            "modules": {},
            "classes": {
                "JChart.f": 1,
                "JChart.common": 1
            },
            "fors": {},
            "namespaces": {
                "JChart": 1
            }
        },
        "../modules/exCanvas/0.3.0/excanvas.js": {
            "name": "../modules/exCanvas/0.3.0/excanvas.js",
            "modules": {},
            "classes": {
                "window.exCanvas": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        },
        "../config.js": {
            "name": "../config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../lib.js": {
            "name": "../lib.js",
            "modules": {},
            "classes": {
                "window.requirejs": 1,
                "window.jQuery": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "JChart.BaseMVC": {
            "name": "JChart.BaseMVC",
            "shortname": "JChart.BaseMVC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JChart",
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 3,
            "description": "MVC 抽象类 ( <b>仅供扩展用, 这个类不能实例化</b>)\n<p><b>require</b>: \n     <a href='window.jQuery.html'>jQuery</a>\n     , <a href='exCanvas.html'>exCanvas</a>\n     , <a href='JChart.common.html'>JChart.common</a>\n</p>\n<p><a href='https://github.com/openjavascript/JChart' target='_blank'>JChart Project Site</a>\n| <a href='http://jchart.openjavascript.org/docs_api/classes/JC.BaseMVC.html' target='_blank'>API docs</a>\n| <a href='../../modules/JChart.BaseMVC/0.1/_demo' target='_blank'>demo link</a></p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2014-02-12",
            "author": "qiushaowei   <suches@btbtd.org> | 75 Team"
        },
        "JChart.Line": {
            "name": "JChart.Line",
            "shortname": "JChart.Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JChart",
            "file": "../modules/JChart.Line/0.1/Line.js",
            "line": 2,
            "description": "组件用途简述\n\n<p><b>require</b>:\n  <a href='JChart.BaseMVC.html'>JChart.BaseMVC</a>\n</p>\n\n<p><a href='https://github.com/openjavascript/jquerycomps' target='_blank'>JChart Project Site</a>\n  | <a href='http://jchart.openjavascript.org/docs_api/classes/JChart.Line.html' target='_blank'>API docs</a>\n  | <a href='../../modules/JChart.Line/0.1/_demo' target='_blank'>demo link</a></p>\n \n<h2>页面只要引用本脚本, 默认会处理 div class=\"js_compLine\"</h2>\n\n<h2>可用的 HTML attribute</h2>\n\n<dl>\n   <dt></dt>\n   <dd><dd>\n</dl>",
            "extends": "JChart.BaseMVC",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2014-02-12",
            "author": "qiushaowei <suches@btbtd.org> | 75 Team",
            "example": [
                "\n       <h2>JChart.Line 示例</h2>"
            ]
        },
        "JChart.f": {
            "name": "JChart.f",
            "shortname": "JChart.f",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JChart",
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 19,
            "description": "JChart.f 是 JChart.common 的别名\n<br />具体使用请见 <a href='JChart.common.html'>JChart.common</a></p>",
            "static": 1
        },
        "JChart.common": {
            "name": "JChart.common",
            "shortname": "JChart.common",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JChart",
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 26,
            "description": "JChart 组件通用静态方法和属性( JChart.common, <b>别名: JChart.f</b> )\n<br />所有 JChart 组件都会依赖这个静态类\n<p><b>require</b>: <a href='window.jQuery.html'>jQuery</a></p>\n<p><a href='https://github.com/openjavascript/JChart' target='_blank'>JChart Project Site</a>\n| <a href='http://jchart.openjavascript.org/docs_api/classes/JChart.common.html' target='_blank'>API docs</a>\n| <a href='../../modules/JChart.common/0.1/_demo/' target='_blank'>demo link</a></p>",
            "static": 1,
            "version": "dev 0.1 2014-02-11",
            "author": "qiushaowei   <suches@btbtd.org> | 360 75 Team"
        },
        "window.exCanvas": {
            "name": "window.exCanvas",
            "shortname": "window.exCanvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "window",
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 1,
            "description": "HTML5 Canvas for Internet Explorer\n<pre>https://code.google.com/p/explorercanvas/\n</pre>",
            "global": ""
        },
        "window.requirejs": {
            "name": "window.requirejs",
            "shortname": "window.requirejs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "window",
            "file": "../lib.js",
            "line": 1,
            "description": "RequireJS 2.1.8 \n<pre>http://github.com/jrburke/requirejs</pre>",
            "global": ""
        },
        "window.jQuery": {
            "name": "window.jQuery",
            "shortname": "window.jQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "window",
            "file": "../lib.js",
            "line": 2062,
            "description": "jQuery JavaScript Library v1.9.1\n<pre>http://jquery.com/\n\nIncludes Sizzle.js\nhttp://sizzlejs.com/\n\nCopyright 2005, 2012 jQuery Foundation, Inc. and other contributors\nReleased under the MIT license\nhttp://jquery.org/license\nDate: 2013-2-4</pre>",
            "global": ""
        }
    },
    "classitems": [
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 33,
            "description": "内部初始化方法",
            "itemtype": "method",
            "name": "_init",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 62,
            "description": "初始化之前调用的方法",
            "itemtype": "method",
            "name": "_beforeInit",
            "access": "private",
            "tagname": "",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 70,
            "description": "内部事件初始化方法",
            "itemtype": "method",
            "name": "_initHanlderEvent",
            "access": "private",
            "tagname": "",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 78,
            "description": "内部初始化完毕时, 调用的方法",
            "itemtype": "method",
            "name": "_inited",
            "access": "private",
            "tagname": "",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 86,
            "description": "获取 显示 BaseMVC 的触发源选择器, 比如 a 标签",
            "itemtype": "method",
            "name": "selector",
            "return": {
                "description": "selector"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 92,
            "description": "使用 jquery on 绑定事件",
            "itemtype": "method",
            "name": "on",
            "type": "String",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "BaseMVCInstance"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 100,
            "description": "使用 jquery trigger 触发绑定事件",
            "itemtype": "method",
            "name": "trigger",
            "type": "String",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BaseMVCInstance"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 108,
            "description": "获取或设置组件实例",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                },
                {
                    "name": "_staticClass",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "_classInstance",
                    "description": "",
                    "type": "ClassInstance"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "ClassInstance | null"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 133,
            "description": "是否自动初始化",
            "itemtype": "property",
            "name": "autoInit",
            "type": "bool",
            "default": "true",
            "static": 1,
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 141,
            "description": "复制 BaseMVC 的所有方法到 _outClass",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 156,
            "description": "复制 _inClass 的所有方法到 _outClass",
            "itemtype": "method",
            "name": "buildClass",
            "params": [
                {
                    "name": "_inClass",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 185,
            "description": "为 _outClass 生成一个通用 Model 类",
            "itemtype": "method",
            "name": "buildModel",
            "params": [
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 198,
            "description": "为 _outClass 生成一个通用 View 类",
            "itemtype": "method",
            "name": "buildView",
            "params": [
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 208,
            "description": "初始化 BaseMVC Model 类 和 View 类",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 213,
            "description": "MVC Model 类( <b>仅供扩展用</b> )\n<br />这个类默认已经包含在lib.js里面, 不需要显式引用",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2013-09-11",
            "author": "qiushaowei   <suches@btbtd.org> | 75 Team",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 221,
            "description": "设置 selector 实例引用的 data 属性名",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 230,
            "description": "使用 jquery on 为 controler 绑定事件",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 240,
            "description": "使用 jquery trigger 触发 controler 绑定事件",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 251,
            "description": "初始化的 jq 选择器",
            "params": [
                {
                    "name": "_setter",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "selector"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 261,
            "description": "读取 int 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "int"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 281,
            "description": "读取 float 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "float"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 301,
            "description": "读取 string 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 318,
            "description": "读取 html 属性值\n<br />这个跟 stringProp 的区别是不会强制转换为小写",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 340,
            "description": "读取 boolean 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String|bool"
                },
                {
                    "name": "_defalut",
                    "description": "",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool|undefined"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 365,
            "description": "读取 callback 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function|undefined"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 387,
            "description": "获取与属性名匹配的 window 变量",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Window variable"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 397,
            "description": "获取 selector 属性的 jquery 选择器",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bool"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 419,
            "description": "判断 _selector 是否具体某种特征",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bool"
            },
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 447,
            "description": "使用 jquery on 为 controler 绑定事件",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.BaseMVC/0.1/BaseMVC.js",
            "line": 455,
            "description": "使用 jquery trigger 触发 controler 绑定事件",
            "class": "JChart.BaseMVC",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.Line/0.1/Line.js",
            "line": 51,
            "description": "初始化可识别的 Line 实例",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Array of LineInstance"
            },
            "class": "JChart.Line",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 2,
            "description": "如果 console 不可用, 生成一个模拟的 console 对象",
            "class": "JChart.f",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 9,
            "description": "声明主要命名空间, 方便迁移",
            "class": "JChart.f",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 44,
            "description": "jquery 1.9.1 默认 string 没有 trim 方法, 这里对 string 原型添加一个默认的 trim 方法",
            "class": "JChart.common",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 48,
            "description": "全局 css z-index 控制属性\n<br /> <b>注意</b>: 这个变量是 window.ZINDEX_COUNT",
            "itemtype": "property",
            "name": "ZINDEX_COUNT",
            "type": "int",
            "default": "50001",
            "static": 1,
            "class": "JChart.common",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 57,
            "description": "扩展对象属性",
            "itemtype": "method",
            "name": "extendObject",
            "params": [
                {
                    "name": "_source",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "_new",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "_overwrite",
                    "description": "是否覆盖已有属性, default = true",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "object"
            },
            "static": 1,
            "class": "JChart.common",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 79,
            "description": "把函数的参数转为数组",
            "itemtype": "method",
            "name": "sliceArgs",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Arguments"
                }
            ],
            "return": {
                "description": "Array"
            },
            "static": 1,
            "class": "JChart.common",
            "namespace": "JChart"
        },
        {
            "file": "../modules/JChart.common/0.1/common.js",
            "line": 93,
            "description": "取当前脚本标签的 src路径",
            "itemtype": "method",
            "name": "scriptPath",
            "static": 1,
            "return": {
                "description": "脚本所在目录的完整路径",
                "type": "String"
            },
            "class": "JChart.common",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 96,
            "description": "Public initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.",
            "params": [
                {
                    "name": "el",
                    "description": "The canvas element to initialize.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "the element that was created.",
                "type": "HTMLElement"
            },
            "class": "window.exCanvas",
            "namespace": "window"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 424,
            "description": "This class implements CanvasRenderingContext2D interface as described by\nthe WHATWG.",
            "params": [
                {
                    "name": "surfaceElement",
                    "description": "The element that the 2D context should\n    be associated with",
                    "type": "HTMLElement"
                }
            ],
            "class": "window.exCanvas",
            "namespace": "window"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 682,
            "description": "Sets the transformation matrix and marks things as dirty",
            "class": "window.exCanvas",
            "namespace": "window"
        },
        {
            "file": "../config.js",
            "line": 4,
            "description": "requirejs config.js for JC Chart Project",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../config.js",
            "line": 18,
            "description": "取当前脚本标签的 src路径",
            "static": 1,
            "return": {
                "description": "脚本所在目录的完整路径",
                "type": "String"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 8,
            "license": "RequireJS 2.1.8 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 56,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 71,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 94,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 110,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 161,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 227,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 260,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 406,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 548,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 836,
            "description": "Checks if the module is ready to define itself, and if so,\ndefine it.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1195,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1248,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1432,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1494,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. A second arg, parent, the parent module,\nis passed in for context, when this method is overriden by\nthe optimizer. Not shown here to keep code compact.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1507,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1563,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1634,
            "description": "Executes a module callback function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1645,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1667,
            "description": "Callback for script errors.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1682,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1732,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1740,
            "description": "Execute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "params": [
                {
                    "name": "fn",
                    "description": "function to execute later.",
                    "type": "Function"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1750,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1797,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1804,
            "description": "Creates the node for the load command. Only used in browser envs.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1817,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1973,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 2047,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:3"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:213"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JChart.Line/0.1/Line.js:2"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JChart.common/0.1/common.js:26"
        },
        {
            "message": "unknown tag: license",
            "line": " ../lib.js:8"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:161"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:260"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:1195"
        },
        {
            "message": "Missing item type\n初始化 BaseMVC Model 类 和 View 类",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:208"
        },
        {
            "message": "Missing item type\nMVC Model 类( <b>仅供扩展用</b> )\n<br />这个类默认已经包含在lib.js里面, 不需要显式引用",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:213"
        },
        {
            "message": "Missing item type\n设置 selector 实例引用的 data 属性名",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:221"
        },
        {
            "message": "Missing item type\n使用 jquery on 为 controler 绑定事件",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:230"
        },
        {
            "message": "Missing item type\n使用 jquery trigger 触发 controler 绑定事件",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:240"
        },
        {
            "message": "Missing item type\n初始化的 jq 选择器",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:251"
        },
        {
            "message": "Missing item type\n读取 int 属性的值",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:261"
        },
        {
            "message": "Missing item type\n读取 float 属性的值",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:281"
        },
        {
            "message": "Missing item type\n读取 string 属性的值",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:301"
        },
        {
            "message": "Missing item type\n读取 html 属性值\n<br />这个跟 stringProp 的区别是不会强制转换为小写",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:318"
        },
        {
            "message": "Missing item type\n读取 boolean 属性的值",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:340"
        },
        {
            "message": "Missing item type\n读取 callback 属性的值",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:365"
        },
        {
            "message": "Missing item type\n获取与属性名匹配的 window 变量",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:387"
        },
        {
            "message": "Missing item type\n获取 selector 属性的 jquery 选择器",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:397"
        },
        {
            "message": "Missing item type\n判断 _selector 是否具体某种特征",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:419"
        },
        {
            "message": "Missing item type\n使用 jquery on 为 controler 绑定事件",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:447"
        },
        {
            "message": "Missing item type\n使用 jquery trigger 触发 controler 绑定事件",
            "line": " ../modules/JChart.BaseMVC/0.1/BaseMVC.js:455"
        },
        {
            "message": "Missing item type\n如果 console 不可用, 生成一个模拟的 console 对象",
            "line": " ../modules/JChart.common/0.1/common.js:2"
        },
        {
            "message": "Missing item type\n声明主要命名空间, 方便迁移",
            "line": " ../modules/JChart.common/0.1/common.js:9"
        },
        {
            "message": "Missing item type\njquery 1.9.1 默认 string 没有 trim 方法, 这里对 string 原型添加一个默认的 trim 方法",
            "line": " ../modules/JChart.common/0.1/common.js:44"
        },
        {
            "message": "Missing item type\nPublic initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:96"
        },
        {
            "message": "Missing item type\nThis class implements CanvasRenderingContext2D interface as described by\nthe WHATWG.",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:424"
        },
        {
            "message": "Missing item type\nSets the transformation matrix and marks things as dirty",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:682"
        },
        {
            "message": "Missing item type\nrequirejs config.js for JC Chart Project",
            "line": " ../config.js:4"
        },
        {
            "message": "Missing item type\n取当前脚本标签的 src路径",
            "line": " ../config.js:18"
        },
        {
            "message": "Missing item type",
            "line": " ../lib.js:8"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "line": " ../lib.js:56"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "line": " ../lib.js:71"
        },
        {
            "message": "Missing item type\nCycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "line": " ../lib.js:94"
        },
        {
            "message": "Missing item type\nSimple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "line": " ../lib.js:110"
        },
        {
            "message": "Missing item type\nConstructs an error with a pointer to an URL with more information.",
            "line": " ../lib.js:161"
        },
        {
            "message": "Missing item type\nTrims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "line": " ../lib.js:227"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " ../lib.js:260"
        },
        {
            "message": "Missing item type\nCreates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "line": " ../lib.js:406"
        },
        {
            "message": "Missing item type\nInternal method to transfer globalQueue items to this context's\ndefQueue.",
            "line": " ../lib.js:548"
        },
        {
            "message": "Missing item type\nChecks if the module is ready to define itself, and if so,\ndefine it.",
            "line": " ../lib.js:836"
        },
        {
            "message": "Missing item type\nGiven an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "line": " ../lib.js:1195"
        },
        {
            "message": "Missing item type\nSet a configuration for the context.",
            "line": " ../lib.js:1248"
        },
        {
            "message": "Missing item type\nConverts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "line": " ../lib.js:1432"
        },
        {
            "message": "Missing item type\nCalled to enable a module if it is still in the registry\nawaiting enablement. A second arg, parent, the parent module,\nis passed in for context, when this method is overriden by\nthe optimizer. Not shown here to keep code compact.",
            "line": " ../lib.js:1494"
        },
        {
            "message": "Missing item type\nInternal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "line": " ../lib.js:1507"
        },
        {
            "message": "Missing item type\nConverts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "line": " ../lib.js:1563"
        },
        {
            "message": "Missing item type\nExecutes a module callback function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "line": " ../lib.js:1634"
        },
        {
            "message": "Missing item type\ncallback for script loads, used to check status of loading.",
            "line": " ../lib.js:1645"
        },
        {
            "message": "Missing item type\nCallback for script errors.",
            "line": " ../lib.js:1667"
        },
        {
            "message": "Missing item type\nMain entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "line": " ../lib.js:1682"
        },
        {
            "message": "Missing item type\nSupport require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "line": " ../lib.js:1732"
        },
        {
            "message": "Missing item type\nExecute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "line": " ../lib.js:1740"
        },
        {
            "message": "Missing item type\nExport require as a global, but only if it does not already exist.",
            "line": " ../lib.js:1750"
        },
        {
            "message": "Missing item type\nAny errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "line": " ../lib.js:1797"
        },
        {
            "message": "Missing item type\nCreates the node for the load command. Only used in browser envs.",
            "line": " ../lib.js:1804"
        },
        {
            "message": "Missing item type\nDoes the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "line": " ../lib.js:1817"
        },
        {
            "message": "Missing item type\nThe function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "line": " ../lib.js:1973"
        },
        {
            "message": "Missing item type\nExecutes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "line": " ../lib.js:2047"
        }
    ]
}