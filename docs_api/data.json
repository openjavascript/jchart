{
    "project": {
        "name": "JChart",
        "description": "javascript chart",
        "version": "0.2",
        "url": "http://jchart.openjavascript/",
        "logo": "jc_logo.png"
    },
    "files": {
        "../modules/JC.BaseMVC/0.1/BaseMVC.js": {
            "name": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "modules": {},
            "classes": {
                "JC.BaseMVC": 1
            },
            "fors": {},
            "namespaces": {
                "JC": 1
            }
        },
        "../modules/JC.common/0.2/common.js": {
            "name": "../modules/JC.common/0.2/common.js",
            "modules": {},
            "classes": {
                "JC.f": 1,
                "JC.common": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../modules/JChart.Base/0.1/Base.js": {
            "name": "../modules/JChart.Base/0.1/Base.js",
            "modules": {},
            "classes": {
                "JChart.Base": 1
            },
            "fors": {},
            "namespaces": {
                "JChart": 1
            }
        },
        "../modules/JChart.Line/0.1/Line.js": {
            "name": "../modules/JChart.Line/0.1/Line.js",
            "modules": {},
            "classes": {
                "JChart.Line": 1
            },
            "fors": {},
            "namespaces": {
                "JChart": 1
            }
        },
        "../modules/exCanvas/0.3.0/excanvas.js": {
            "name": "../modules/exCanvas/0.3.0/excanvas.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../config.js": {
            "name": "../config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../lib.js": {
            "name": "../lib.js",
            "modules": {},
            "classes": {
                "window.requirejs": 1,
                "window.jQuery": 1
            },
            "fors": {},
            "namespaces": {
                "window": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "JC.BaseMVC": {
            "name": "JC.BaseMVC",
            "shortname": "JC.BaseMVC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JC",
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 3,
            "description": "MVC 抽象类 ( <b>仅供扩展用, 这个类不能实例化</b>)\n<p><b>require</b>: \n     <a href='window.jQuery.html'>jQuery</a>\n     , <a href='JC.common.html'>JC.common</a>\n</p>\n<p><a href='https://github.com/openjavascript/jquerycomps' target='_blank'>JC Project Site</a>\n| <a href='http://jc2.openjavascript.org/docs_api/classes/JC.BaseMVC.html' target='_blank'>API docs</a>\n| <a href='../../modules/JC.BaseMVC/0.1/_demo' target='_blank'>demo link</a></p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2013-09-07",
            "author": "qiushaowei   <suches@btbtd.org> | 75 Team"
        },
        "JC.f": {
            "name": "JC.f",
            "shortname": "JC.f",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JC",
            "file": "../modules/JC.common/0.2/common.js",
            "line": 19,
            "description": "JC.f 是 JC.common 的别名\n<br />具体使用请见 <a href='JC.common.html'>JC.common</a></p>",
            "static": 1
        },
        "JC.common": {
            "name": "JC.common",
            "shortname": "JC.common",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JC",
            "file": "../modules/JC.common/0.2/common.js",
            "line": 25,
            "description": "JC 组件通用静态方法和属性 ( JC.common, <b>别名: JC.f</b> )\n<br />所有 JC 组件都会依赖这个静态类\n<p><b>require</b>: <a href='window.jQuery.html'>jQuery</a></p>\n<p><a href='https://github.com/openjavascript/jquerycomps' target='_blank'>JC Project Site</a>\n| <a href='http://jc2.openjavascript.org/docs_api/classes/JC.common.html' target='_blank'>API docs</a>\n| <a href='../../modules/JC.common/0.2/_demo/' target='_blank'>demo link</a></p>",
            "static": 1,
            "version": "dev 0.1 2013-07-04",
            "author": "qiushaowei   <suches@btbtd.org> | 360 75 Team"
        },
        "JChart.Base": {
            "name": "JChart.Base",
            "shortname": "JChart.Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JChart",
            "file": "../modules/JChart.Base/0.1/Base.js",
            "line": 2,
            "description": "组件用途简述\n\n<p><b>require</b>:\n  <a href='JChart.Stage.html'>JChart.Stage</a>\n</p>\n\n<p><a href='https://github.com/openjavascript/jchart' target='_blank'>JChart Project Site</a>\n  | <a href='http://jchart.openjavascript.org/docs_api/classes/JChart.Base.html' target='_blank'>API docs</a>\n  | <a href='../../modules/JChart.Base/0.1/_demo' target='_blank'>demo link</a></p>\n \n<h2>页面只要引用本脚本, 默认会处理 div class=\"js_compBase\"</h2>\n\n<h2>可用的 HTML attribute</h2>\n\n<dl>\n   <dt></dt>\n   <dd><dd>\n</dl>",
            "extends": "JC.BaseMVC",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2014-02-13",
            "author": "qiushaowei <suches@btbtd.org> | 75 Team",
            "example": [
                "\n       <h2>JC.Base 示例</h2>"
            ]
        },
        "JChart.Line": {
            "name": "JChart.Line",
            "shortname": "JChart.Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "JChart",
            "file": "../modules/JChart.Line/0.1/Line.js",
            "line": 2,
            "description": "组件用途简述\n\n<p><b>require</b>:\n  <a href='JChart.Base.html'>JChart.Base</a>\n</p>\n\n<p><a href='https://github.com/openjavascript/jchart' target='_blank'>JChart Project Site</a>\n  | <a href='http://jchart.openjavascript.org/docs_api/classes/JChart.Line.html' target='_blank'>API docs</a>\n  | <a href='../../modules/JChart.Line/0.1/_demo' target='_blank'>demo link</a></p>\n \n<h2>页面只要引用本脚本, 默认会处理 span class=\"jchartLine\"</h2>\n\n<h2>可用的 HTML attribute</h2>\n\n<dl>\n   <dt></dt>\n   <dd><dd>\n</dl>",
            "extends": "JChart.BaseMVC",
            "is_constructor": 1,
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2014-02-12",
            "author": "qiushaowei <suches@btbtd.org> | 75 Team",
            "example": [
                "\n       <h2>JChart.Line 示例</h2>"
            ]
        },
        "window.requirejs": {
            "name": "window.requirejs",
            "shortname": "window.requirejs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "window",
            "file": "../lib.js",
            "line": 1,
            "description": "RequireJS 2.1.8 \n<pre>http://github.com/jrburke/requirejs</pre>",
            "global": ""
        },
        "window.jQuery": {
            "name": "window.jQuery",
            "shortname": "window.jQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "window",
            "file": "../lib.js",
            "line": 2062,
            "description": "jQuery JavaScript Library v1.9.1\n<pre>http://jquery.com/\n\nIncludes Sizzle.js\nhttp://sizzlejs.com/\n\nCopyright 2005, 2012 jQuery Foundation, Inc. and other contributors\nReleased under the MIT license\nhttp://jquery.org/license\nDate: 2013-2-4</pre>",
            "global": ""
        }
    },
    "classitems": [
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 32,
            "description": "内部初始化方法",
            "itemtype": "method",
            "name": "_init",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 61,
            "description": "初始化之前调用的方法",
            "itemtype": "method",
            "name": "_beforeInit",
            "access": "private",
            "tagname": "",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 69,
            "description": "内部事件初始化方法",
            "itemtype": "method",
            "name": "_initHanlderEvent",
            "access": "private",
            "tagname": "",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 77,
            "description": "内部初始化完毕时, 调用的方法",
            "itemtype": "method",
            "name": "_inited",
            "access": "private",
            "tagname": "",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 85,
            "description": "获取 显示 BaseMVC 的触发源选择器, 比如 a 标签",
            "itemtype": "method",
            "name": "selector",
            "return": {
                "description": "selector"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 91,
            "description": "使用 jquery on 绑定事件",
            "itemtype": "method",
            "name": "on",
            "type": "String",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "BaseMVCInstance"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 99,
            "description": "使用 jquery trigger 触发绑定事件",
            "itemtype": "method",
            "name": "trigger",
            "type": "String",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "BaseMVCInstance"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 107,
            "description": "获取或设置组件实例",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                },
                {
                    "name": "_staticClass",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "_classInstance",
                    "description": "",
                    "type": "ClassInstance"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "ClassInstance | null"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 132,
            "description": "是否自动初始化",
            "itemtype": "property",
            "name": "autoInit",
            "type": "bool",
            "default": "true",
            "static": 1,
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 140,
            "description": "复制 BaseMVC 的所有方法到 _outClass",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 157,
            "description": "复制 _inClass 的所有方法到 _outClass",
            "itemtype": "method",
            "name": "buildClass",
            "params": [
                {
                    "name": "_inClass",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 186,
            "description": "为 _outClass 生成一个通用 Model 类",
            "itemtype": "method",
            "name": "buildModel",
            "params": [
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 199,
            "description": "为 _outClass 生成一个通用 View 类",
            "itemtype": "method",
            "name": "buildView",
            "params": [
                {
                    "name": "_outClass",
                    "description": "",
                    "type": "Class"
                }
            ],
            "static": 1,
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 209,
            "description": "初始化 BaseMVC Model 类 和 View 类",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 214,
            "description": "MVC Model 类( <b>仅供扩展用</b> )\n<br />这个类默认已经包含在lib.js里面, 不需要显式引用\n<p><a href='https://github.com/openjavascript/jquerycomps' target='_blank'>JC Project Site</a>\n| <a href='http://jc2.openjavascript.org/docs_api/classes/JC.BaseMVC.Model.html' target='_blank'>API docs</a>\n| <a href='../../modules/JC.BaseMVC/0.1/_demo' target='_blank'>demo link</a></p>\n<p><b>see also</b>: <a href='JC.BaseMVC.html'>JC.BaseMVC</a></p>",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector|string"
                }
            ],
            "version": "dev 0.1 2013-09-11",
            "author": "qiushaowei   <suches@btbtd.org> | 75 Team",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 226,
            "description": "设置 selector 实例引用的 data 属性名",
            "itemtype": "property",
            "name": "_instanceName",
            "type": "string",
            "default": "BaseMVCIns",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 240,
            "description": "使用 jquery on 为 controler 绑定事件",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 250,
            "description": "使用 jquery trigger 触发 controler 绑定事件",
            "params": [
                {
                    "name": "_evtName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 261,
            "description": "初始化的 jq 选择器",
            "params": [
                {
                    "name": "_setter",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "selector"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 271,
            "description": "读取 int 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "int"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 291,
            "description": "读取 float 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "float"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 311,
            "description": "读取 string 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 328,
            "description": "读取 html 属性值\n<br />这个跟 stringProp 的区别是不会强制转换为小写",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 350,
            "description": "读取 boolean 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String|bool"
                },
                {
                    "name": "_defalut",
                    "description": "",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool|undefined"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 375,
            "description": "读取 callback 属性的值",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function|undefined"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 397,
            "description": "获取与属性名匹配的 window 变量",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Window variable"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 407,
            "description": "获取 selector 属性的 jquery 选择器",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bool"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 429,
            "description": "判断 _selector 是否具体某种特征",
            "params": [
                {
                    "name": "_selector",
                    "description": "如果 _key 为空将视 _selector 为 _key, _selector 为 this.selector()",
                    "type": "Selector|string"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bool"
            },
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 457,
            "description": "使用 jquery on 为 controler 绑定事件",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.BaseMVC/0.1/BaseMVC.js",
            "line": 465,
            "description": "使用 jquery trigger 触发 controler 绑定事件",
            "class": "JC.BaseMVC",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 2,
            "description": "如果 console 不可用, 生成一个模拟的 console 对象",
            "class": "JC.f",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 9,
            "description": "声明主要命名空间, 方便迁移",
            "class": "JC.f",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 83,
            "description": "判断 JC.common 是否需要向后兼容, 如果需要的话, 向 window 添加全局静态函数",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 105,
            "description": "jquery 1.9.1 默认 string 没有 trim 方法, 这里对 string 原型添加一个默认的 trim 方法",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 109,
            "description": "全局 css z-index 控制属性\n<br /> <b>注意</b>: 这个变量是 window.ZINDEX_COUNT",
            "itemtype": "property",
            "name": "ZINDEX_COUNT",
            "type": "int",
            "default": "50001",
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 118,
            "description": "把函数的参数转为数组",
            "itemtype": "method",
            "name": "sliceArgs",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Arguments"
                }
            ],
            "return": {
                "description": "Array"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 132,
            "description": "取 URL 的 host name",
            "itemtype": "method",
            "name": "urlHostName",
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 148,
            "description": "把 URL 相对路径 转换为 绝对路径",
            "itemtype": "method",
            "name": "relativePath",
            "params": [
                {
                    "name": "_path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 176,
            "description": "按格式输出字符串",
            "itemtype": "method",
            "name": "printf",
            "static": 1,
            "params": [
                {
                    "name": "_str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "example": [
                "\n     printf( 'asdfasdf{0}sdfasdf{1}', '000', 1111 );\n     //return asdfasdf000sdfasdf1111"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 192,
            "description": "判断URL中是否有某个get参数",
            "itemtype": "method",
            "name": "hasUrlParam",
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bool"
            },
            "static": 1,
            "example": [
                "\n     var bool = hasUrlParam( 'getkey' );"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 214,
            "description": "添加URL参数\n<br /><b>require:</b> delUrlParam, filterXSS",
            "itemtype": "method",
            "name": "addUrlParams",
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "example": [
                "\n           var url = addUrlParams( location.href, {'key1': 'key1value', 'key2': 'key2value' } );"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 240,
            "description": "xss 过滤函数",
            "itemtype": "method",
            "name": "filterXSS",
            "params": [
                {
                    "name": "_s",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 255,
            "description": "取URL参数的值\n<br /><b>require:</b> filterXSS",
            "itemtype": "method",
            "name": "getUrlParam",
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "example": [
                "\n           var defaultTag = getUrlParam(location.href, 'tag');  "
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 283,
            "description": "取URL参数的值, 这个方法返回数组\n<br />与 getUrlParam 的区别是可以获取 checkbox 的所有值\n<br /><b>require:</b> filterXSS",
            "itemtype": "method",
            "name": "getUrlParams",
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array"
            },
            "static": 1,
            "example": [
                "\n           var params = getUrlParams(location.href, 'tag');  "
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 313,
            "description": "删除URL参数\n<br /><b>require:</b> filterXSS",
            "itemtype": "method",
            "name": "delUrlParam",
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "example": [
                "\n           var url = delUrlParam( location.href, 'tag' );"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 343,
            "description": "提示需要 HTTP 环境",
            "itemtype": "method",
            "name": "httpRequire",
            "static": 1,
            "params": [
                {
                    "name": "_msg",
                    "description": "要提示的文字, 默认 \"本示例需要HTTP环境'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "bool     如果是HTTP环境返回true, 否则返回false"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 358,
            "description": "删除 URL 的锚点\n<br /><b>require:</b> addUrlParams, filterXSS",
            "itemtype": "method",
            "name": "removeUrlSharp",
            "static": 1,
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_nornd",
                    "description": "是否不添加随机参数",
                    "type": "Bool"
                },
                {
                    "name": "_rndName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 380,
            "description": "重载页面\n<br /><b>require:</b> removeUrlSharp, addUrlParams, filterXSS",
            "itemtype": "method",
            "name": "reloadPage",
            "static": 1,
            "params": [
                {
                    "name": "_url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_nornd",
                    "description": "",
                    "type": "Bool"
                },
                {
                    "name": "_delayms",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 401,
            "description": "取小数点的N位\n<br />JS 解析 浮点数的时候，经常出现各种不可预知情况，这个函数就是为了解决这个问题",
            "itemtype": "method",
            "name": "parseFinance",
            "static": 1,
            "params": [
                {
                    "name": "_i",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "_dot,",
                    "description": "default = 2",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "number"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 416,
            "description": "js 附加字串函数",
            "itemtype": "method",
            "name": "padChar",
            "static": 1,
            "params": [
                {
                    "name": "_str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_len",
                    "description": "",
                    "type": "Intl"
                },
                {
                    "name": "_char",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 432,
            "description": "格式化日期为 YYYY-mm-dd 格式\n<br /><b>require</b>: pad\\_char\\_f",
            "itemtype": "method",
            "name": "formatISODate",
            "static": 1,
            "params": [
                {
                    "name": "_date",
                    "description": "要格式化日期的日期对象",
                    "type": "Date"
                },
                {
                    "name": "_split",
                    "description": "定义年月日的分隔符, 默认为 '-'",
                    "type": "String|undefined"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 446,
            "description": "从 ISODate 字符串解析日期对象",
            "itemtype": "method",
            "name": "parseISODate",
            "static": 1,
            "params": [
                {
                    "name": "_datestr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "date"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 464,
            "description": "从日期字符串解析日期对象\n<br />兼容 JC.Calendar 日期格式",
            "itemtype": "method",
            "name": "parseDate",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "Date"
                },
                {
                    "name": "_selector",
                    "description": "如果 _selector 为真, 则尝试从 _selector 的 html 属性 dateParse 对日期进行格式化",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "",
                "type": "Date|null"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 487,
            "description": "获取不带 时分秒的 日期对象",
            "itemtype": "method",
            "name": "pureDate",
            "params": [
                {
                    "name": "_d",
                    "description": "可选参数, 如果为空 = new Date",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "Date"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 499,
            "description": "克隆日期对象",
            "itemtype": "method",
            "name": "cloneDate",
            "static": 1,
            "params": [
                {
                    "name": "_date",
                    "description": "需要克隆的日期",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "需要克隆的日期对象",
                "type": "Date"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 507,
            "description": "判断两个日期是否为同一天",
            "itemtype": "method",
            "name": "isSameDay",
            "static": 1,
            "params": [
                {
                    "name": "_d1",
                    "description": "需要判断的日期1",
                    "type": "Date"
                },
                {
                    "name": "_d2",
                    "description": "需要判断的日期2",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 519,
            "description": "判断两个日期是否为同一月份",
            "itemtype": "method",
            "name": "isSameMonth",
            "static": 1,
            "params": [
                {
                    "name": "_d1",
                    "description": "需要判断的日期1",
                    "type": "Date"
                },
                {
                    "name": "_d2",
                    "description": "需要判断的日期2",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 531,
            "description": "取得一个月份中最大的一天",
            "itemtype": "method",
            "name": "maxDayOfMonth",
            "static": 1,
            "params": [
                {
                    "name": "_date",
                    "description": "",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "月份中最大的一天",
                "type": "Int"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 544,
            "description": "取当前脚本标签的 src路径",
            "itemtype": "method",
            "name": "scriptPath",
            "static": 1,
            "return": {
                "description": "脚本所在目录的完整路径",
                "type": "String"
            },
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 556,
            "description": "缓动函数, 动画效果为按时间缓动 \n<br />这个函数只考虑递增, 你如果需要递减的话, 在回调里用 _maxVal - _stepval",
            "itemtype": "method",
            "name": "easyEffect",
            "static": 1,
            "params": [
                {
                    "name": "_cb",
                    "description": "缓动运动时的回调",
                    "type": "Function"
                },
                {
                    "name": "_maxVal",
                    "description": "缓动的最大值, default = 200",
                    "type": "Number"
                },
                {
                    "name": "_startVal",
                    "description": "缓动的起始值, default = 0",
                    "type": "Number"
                },
                {
                    "name": "_duration",
                    "description": "缓动的总时间, 单位毫秒, default = 200",
                    "type": "Number"
                },
                {
                    "name": "_stepMs",
                    "description": "缓动的间隔, 单位毫秒, default = 2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "interval"
            },
            "example": [
                "\n           $(document).ready(function(){\n               window.js_output = $('span.js_output');\n               window.ls = [];\n               window.EFF_INTERVAL = easyEffect( effectcallback, 100);\n           });\n\n           function effectcallback( _stepval, _done ){\n               js_output.html( _stepval );\n               ls.push( _stepval );\n\n               !_done && js_output.html( _stepval );\n               _done && js_output.html( _stepval + '<br />' + ls.join() );\n           }"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 609,
            "description": "把输入值转换为布尔值",
            "itemtype": "method",
            "name": "parseBool",
            "params": [
                {
                    "name": "_input",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "bool"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 628,
            "description": "判断是否支持 CSS position: fixed",
            "itemtype": "property",
            "name": "$.support.isFixed",
            "type": "bool",
            "require": "jquery",
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 657,
            "description": "绑定或清除 mousewheel 事件",
            "itemtype": "method",
            "name": "mousewheelEvent",
            "params": [
                {
                    "name": "_cb",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "_detach",
                    "description": "",
                    "type": "Bool"
                }
            ],
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 679,
            "description": "获取 selector 的指定父级标签",
            "itemtype": "method",
            "name": "getJqParent",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                },
                {
                    "name": "_filter",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "selector"
            },
            "require": "jquery",
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 705,
            "description": "扩展 jquery 选择器\n<br />扩展起始字符的 '/' 符号为 jquery 父节点选择器\n<br />扩展起始字符的 '|' 符号为 jquery 子节点选择器\n<br />扩展起始字符的 '(' 符号为 jquery 父节点查找识别符( getJqParent )",
            "itemtype": "method",
            "name": "parentSelector",
            "params": [
                {
                    "name": "_item",
                    "description": "",
                    "type": "Selector"
                },
                {
                    "name": "_selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "_finder",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "selector"
            },
            "require": "jquery",
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 773,
            "description": "获取脚本模板的内容",
            "itemtype": "method",
            "name": "scriptContent",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 788,
            "description": "取函数名 ( 匿名函数返回空 )",
            "itemtype": "method",
            "name": "funcName",
            "params": [
                {
                    "name": "_func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 803,
            "description": "动态添加内容时, 初始化可识别的组件\n<dl>\n     <dt>目前会自动识别的组件</dt>\n     <dd>\n         Bizs.CommonModify, JC.Panel, JC.Dialog\n         <br /><b>自动识别的组件不用显式调用  jcAutoInitComps 去识别可识别的组件</b>\n     </dd>\n</d>\n<dl>\n     <dt>可识别的组件</dt>\n     <dd>\n         JC.AutoSelect, JC.AutoChecked, JC.AjaxUpload, JC.Calendar\n         , JC.Drag, JC.DCalendar, JC.Placeholder, JC.TableFreeze, JC.ImageCutter\n         <br />Bizs.DisableLogic, Bizs.FormLogic, Bizs.MoneyTips, Bizs.AutoSelectComplete\n     </dd>\n</d>",
            "itemtype": "method",
            "name": "jcAutoInitComps",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 828,
            "description": "联动下拉框",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 832,
            "description": "日历组件",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 836,
            "description": "双日历组件",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 840,
            "description": "全选反选",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 844,
            "description": "Ajax 上传",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 848,
            "description": "占位符",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 852,
            "description": "表格冻结",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 856,
            "description": "拖曳",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 860,
            "description": "图片裁切",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 866,
            "description": "disable / enable",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 870,
            "description": "表单提交逻辑",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 874,
            "description": "格式化金额",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 878,
            "description": "自动完成",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 883,
            "description": "URL 占位符识别功能\n<br /><b>require:</b> addUrlParams, filterXSS",
            "itemtype": "method",
            "name": "urlDetect",
            "params": [
                {
                    "name": "_url",
                    "description": "如果 起始字符为 URL, 那么 URL 将祝为本页的URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "example": [
                "\n     urlDetect( '?test' ); //output: ?test\n\n     urlDetect( 'URL,a=1&b=2' ); //output: your.com?a=1&b=2\n     urlDetect( 'URL,a=1,b=2' ); //output: your.com?a=1&b=2\n     urlDetect( 'URLa=1&b=2' ); //output: your.com?a=1&b=2"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 924,
            "description": "日期占位符识别功能",
            "itemtype": "method",
            "name": "dateDetect",
            "params": [
                {
                    "name": "_dateStr",
                    "description": "如果起始字符为 NOW, 那么将视为当前日期\n                                 , 如果起始字符为 NOWFirst, 那么将视为当前月的1号",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Date|null"
            },
            "static": 1,
            "example": [
                "\n     dateDetect( 'now' ); //2014-10-02\n     dateDetect( 'now,3d' ); //2013-10-05\n     dateDetect( 'now,-3d' ); //2013-09-29\n     dateDetect( 'now,2w' ); //2013-10-16\n     dateDetect( 'now,-2m' ); //2013-08-02\n     dateDetect( 'now,4y' ); //2017-10-02\n\n     dateDetect( 'now,1d,1w,1m,1y' ); //2014-11-10"
            ],
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 988,
            "description": "inject jquery val func, for hidden change event",
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 1006,
            "description": "逗号格式化金额",
            "itemtype": "method",
            "name": "moneyFormat",
            "params": [
                {
                    "name": "_number",
                    "description": "",
                    "type": "Int|string"
                },
                {
                    "name": "_len",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "_floatLen",
                    "description": "",
                    "type": "Int"
                },
                {
                    "name": "_splitSymbol",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 1056,
            "description": "日期格式化 (具体格式请查看 PHP Date Formats)",
            "itemtype": "method",
            "name": "dateFormat",
            "params": [
                {
                    "name": "_date",
                    "description": "default = now",
                    "type": "Date"
                },
                {
                    "name": "_format",
                    "description": "default = \"YY-MM-DD\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 1101,
            "description": "扩展对象属性",
            "itemtype": "method",
            "name": "extendObject",
            "params": [
                {
                    "name": "_source",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "_new",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "_overwrite",
                    "description": "是否覆盖已有属性, default = true",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "object"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 1123,
            "description": "timeout 控制逻辑, 避免相同功能的 setTimeout 重复执行",
            "itemtype": "method",
            "name": "safeTimeout",
            "params": [
                {
                    "name": "_timeout",
                    "description": "",
                    "type": "Timeout|function"
                },
                {
                    "name": "_obj",
                    "description": "default = window.TIMEOUT_HOST || {}",
                    "type": "Object"
                },
                {
                    "name": "_name",
                    "description": "default = 'NORMAL'",
                    "type": "String"
                },
                {
                    "name": "_ms",
                    "description": "default = 50",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "object"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 1144,
            "description": "URL 请求时, 获取对URL参数进行编码的函数",
            "itemtype": "method",
            "name": "encoder",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "return": {
                "description": "default encodeURIComponent",
                "type": "Encode function"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JC.common/0.2/common.js",
            "line": 1162,
            "description": "深度克隆对象",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "_inObj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object"
            },
            "static": 1,
            "class": "JC.common",
            "namespace": "JC"
        },
        {
            "file": "../modules/JChart.Line/0.1/Line.js",
            "line": 51,
            "description": "初始化可识别的 Line 实例",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "_selector",
                    "description": "",
                    "type": "Selector"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Array of LineInstance"
            },
            "class": "JChart.Line",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 53,
            "description": "This funtion is assigned to the <canvas> elements as element.getContext().",
            "this": "{HTMLElement}",
            "return": {
                "description": "",
                "type": "CanvasRenderingContext2D_"
            },
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 65,
            "description": "Binds a function to an object. The returned function will always use the\npassed in {@code obj} as {@code this}.\n\nExample:\n\n  g = bind(f, obj, a, b)\n  g(c, d) // will do f.call(obj, a, b, c, d)",
            "params": [
                {
                    "name": "f",
                    "description": "The function to bind the object to",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "The object that should act as this when the function\n    is called",
                    "type": "Object"
                },
                {
                    "name": "var_args",
                    "description": "Rest arguments that will be used as the initial\n    arguments when the function is called",
                    "type": "*"
                }
            ],
            "return": {
                "description": "A new function that has bound this",
                "type": "Function"
            },
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 132,
            "description": "Public initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.",
            "params": [
                {
                    "name": "el",
                    "description": "The canvas element to initialize.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "the element that was created.",
                "type": "HTMLElement"
            },
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 563,
            "description": "This class implements CanvasRenderingContext2D interface as described by\nthe WHATWG.",
            "params": [
                {
                    "name": "canvasElement",
                    "description": "The element that the 2D context should\nbe associated with",
                    "type": "HTMLElement"
                }
            ],
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 1200,
            "description": "The text drawing function.\nThe maxWidth argument isn't taken in account, since no browser supports\nit yet.",
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../modules/exCanvas/0.3.0/excanvas.js",
            "line": 1318,
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../config.js",
            "line": 4,
            "description": "requirejs config.js for JC Chart Project",
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../config.js",
            "line": 24,
            "description": "取当前脚本标签的 src路径",
            "static": 1,
            "return": {
                "description": "脚本所在目录的完整路径",
                "type": "String"
            },
            "class": "window.requirejs",
            "namespace": "JChart"
        },
        {
            "file": "../lib.js",
            "line": 8,
            "license": "RequireJS 2.1.8 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 56,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 71,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 94,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 110,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 161,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 227,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 260,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 406,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 548,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 836,
            "description": "Checks if the module is ready to define itself, and if so,\ndefine it.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1195,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1248,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1432,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1494,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. A second arg, parent, the parent module,\nis passed in for context, when this method is overriden by\nthe optimizer. Not shown here to keep code compact.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1507,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1563,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1634,
            "description": "Executes a module callback function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1645,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1667,
            "description": "Callback for script errors.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1682,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1732,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1740,
            "description": "Execute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "params": [
                {
                    "name": "fn",
                    "description": "function to execute later.",
                    "type": "Function"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1750,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1797,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1804,
            "description": "Creates the node for the load command. Only used in browser envs.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1817,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 1973,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": "window.requirejs",
            "namespace": "window"
        },
        {
            "file": "../lib.js",
            "line": 2047,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": "window.requirejs",
            "namespace": "window"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:3"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:214"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JC.common/0.2/common.js:25"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JC.common/0.2/common.js:25"
        },
        {
            "message": "unknown tag: require",
            "line": " ../modules/JC.common/0.2/common.js:628"
        },
        {
            "message": "unknown tag: require",
            "line": " ../modules/JC.common/0.2/common.js:679"
        },
        {
            "message": "unknown tag: require",
            "line": " ../modules/JC.common/0.2/common.js:705"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JChart.Base/0.1/Base.js:2"
        },
        {
            "message": "unknown tag: version",
            "line": " ../modules/JChart.Line/0.1/Line.js:2"
        },
        {
            "message": "unknown tag: this",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:53"
        },
        {
            "message": "unknown tag: license",
            "line": " ../lib.js:8"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:161"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:260"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../lib.js:1195"
        },
        {
            "message": "Missing item type\n初始化 BaseMVC Model 类 和 View 类",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:209"
        },
        {
            "message": "Missing item type\nMVC Model 类( <b>仅供扩展用</b> )\n<br />这个类默认已经包含在lib.js里面, 不需要显式引用\n<p><a href='https://github.com/openjavascript/jquerycomps' target='_blank'>JC Project Site</a>\n| <a href='http://jc2.openjavascript.org/docs_api/classes/JC.BaseMVC.Model.html' target='_blank'>API docs</a>\n| <a href='../../modules/JC.BaseMVC/0.1/_demo' target='_blank'>demo link</a></p>\n<p><b>see also</b>: <a href='JC.BaseMVC.html'>JC.BaseMVC</a></p>",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:214"
        },
        {
            "message": "Missing item type\n使用 jquery on 为 controler 绑定事件",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:240"
        },
        {
            "message": "Missing item type\n使用 jquery trigger 触发 controler 绑定事件",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:250"
        },
        {
            "message": "Missing item type\n初始化的 jq 选择器",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:261"
        },
        {
            "message": "Missing item type\n读取 int 属性的值",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:271"
        },
        {
            "message": "Missing item type\n读取 float 属性的值",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:291"
        },
        {
            "message": "Missing item type\n读取 string 属性的值",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:311"
        },
        {
            "message": "Missing item type\n读取 html 属性值\n<br />这个跟 stringProp 的区别是不会强制转换为小写",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:328"
        },
        {
            "message": "Missing item type\n读取 boolean 属性的值",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:350"
        },
        {
            "message": "Missing item type\n读取 callback 属性的值",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:375"
        },
        {
            "message": "Missing item type\n获取与属性名匹配的 window 变量",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:397"
        },
        {
            "message": "Missing item type\n获取 selector 属性的 jquery 选择器",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:407"
        },
        {
            "message": "Missing item type\n判断 _selector 是否具体某种特征",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:429"
        },
        {
            "message": "Missing item type\n使用 jquery on 为 controler 绑定事件",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:457"
        },
        {
            "message": "Missing item type\n使用 jquery trigger 触发 controler 绑定事件",
            "line": " ../modules/JC.BaseMVC/0.1/BaseMVC.js:465"
        },
        {
            "message": "Missing item type\n如果 console 不可用, 生成一个模拟的 console 对象",
            "line": " ../modules/JC.common/0.2/common.js:2"
        },
        {
            "message": "Missing item type\n声明主要命名空间, 方便迁移",
            "line": " ../modules/JC.common/0.2/common.js:9"
        },
        {
            "message": "Missing item type\n判断 JC.common 是否需要向后兼容, 如果需要的话, 向 window 添加全局静态函数",
            "line": " ../modules/JC.common/0.2/common.js:83"
        },
        {
            "message": "Missing item type\njquery 1.9.1 默认 string 没有 trim 方法, 这里对 string 原型添加一个默认的 trim 方法",
            "line": " ../modules/JC.common/0.2/common.js:105"
        },
        {
            "message": "Missing item type\n联动下拉框",
            "line": " ../modules/JC.common/0.2/common.js:828"
        },
        {
            "message": "Missing item type\n日历组件",
            "line": " ../modules/JC.common/0.2/common.js:832"
        },
        {
            "message": "Missing item type\n双日历组件",
            "line": " ../modules/JC.common/0.2/common.js:836"
        },
        {
            "message": "Missing item type\n全选反选",
            "line": " ../modules/JC.common/0.2/common.js:840"
        },
        {
            "message": "Missing item type\nAjax 上传",
            "line": " ../modules/JC.common/0.2/common.js:844"
        },
        {
            "message": "Missing item type\n占位符",
            "line": " ../modules/JC.common/0.2/common.js:848"
        },
        {
            "message": "Missing item type\n表格冻结",
            "line": " ../modules/JC.common/0.2/common.js:852"
        },
        {
            "message": "Missing item type\n拖曳",
            "line": " ../modules/JC.common/0.2/common.js:856"
        },
        {
            "message": "Missing item type\n图片裁切",
            "line": " ../modules/JC.common/0.2/common.js:860"
        },
        {
            "message": "Missing item type\ndisable / enable",
            "line": " ../modules/JC.common/0.2/common.js:866"
        },
        {
            "message": "Missing item type\n表单提交逻辑",
            "line": " ../modules/JC.common/0.2/common.js:870"
        },
        {
            "message": "Missing item type\n格式化金额",
            "line": " ../modules/JC.common/0.2/common.js:874"
        },
        {
            "message": "Missing item type\n自动完成",
            "line": " ../modules/JC.common/0.2/common.js:878"
        },
        {
            "message": "Missing item type\ninject jquery val func, for hidden change event",
            "line": " ../modules/JC.common/0.2/common.js:988"
        },
        {
            "message": "Missing item type\nThis funtion is assigned to the <canvas> elements as element.getContext().",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:53"
        },
        {
            "message": "Missing item type\nBinds a function to an object. The returned function will always use the\npassed in {@code obj} as {@code this}.\n\nExample:\n\n  g = bind(f, obj, a, b)\n  g(c, d) // will do f.call(obj, a, b, c, d)",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:65"
        },
        {
            "message": "Missing item type\nPublic initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:132"
        },
        {
            "message": "Missing item type\nThis class implements CanvasRenderingContext2D interface as described by\nthe WHATWG.",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:563"
        },
        {
            "message": "Missing item type\nThe text drawing function.\nThe maxWidth argument isn't taken in account, since no browser supports\nit yet.",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:1200"
        },
        {
            "message": "Missing item type",
            "line": " ../modules/exCanvas/0.3.0/excanvas.js:1318"
        },
        {
            "message": "Missing item type\nrequirejs config.js for JC Chart Project",
            "line": " ../config.js:4"
        },
        {
            "message": "Missing item type\n取当前脚本标签的 src路径",
            "line": " ../config.js:24"
        },
        {
            "message": "Missing item type",
            "line": " ../lib.js:8"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "line": " ../lib.js:56"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "line": " ../lib.js:71"
        },
        {
            "message": "Missing item type\nCycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "line": " ../lib.js:94"
        },
        {
            "message": "Missing item type\nSimple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "line": " ../lib.js:110"
        },
        {
            "message": "Missing item type\nConstructs an error with a pointer to an URL with more information.",
            "line": " ../lib.js:161"
        },
        {
            "message": "Missing item type\nTrims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "line": " ../lib.js:227"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " ../lib.js:260"
        },
        {
            "message": "Missing item type\nCreates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "line": " ../lib.js:406"
        },
        {
            "message": "Missing item type\nInternal method to transfer globalQueue items to this context's\ndefQueue.",
            "line": " ../lib.js:548"
        },
        {
            "message": "Missing item type\nChecks if the module is ready to define itself, and if so,\ndefine it.",
            "line": " ../lib.js:836"
        },
        {
            "message": "Missing item type\nGiven an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "line": " ../lib.js:1195"
        },
        {
            "message": "Missing item type\nSet a configuration for the context.",
            "line": " ../lib.js:1248"
        },
        {
            "message": "Missing item type\nConverts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "line": " ../lib.js:1432"
        },
        {
            "message": "Missing item type\nCalled to enable a module if it is still in the registry\nawaiting enablement. A second arg, parent, the parent module,\nis passed in for context, when this method is overriden by\nthe optimizer. Not shown here to keep code compact.",
            "line": " ../lib.js:1494"
        },
        {
            "message": "Missing item type\nInternal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "line": " ../lib.js:1507"
        },
        {
            "message": "Missing item type\nConverts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "line": " ../lib.js:1563"
        },
        {
            "message": "Missing item type\nExecutes a module callback function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "line": " ../lib.js:1634"
        },
        {
            "message": "Missing item type\ncallback for script loads, used to check status of loading.",
            "line": " ../lib.js:1645"
        },
        {
            "message": "Missing item type\nCallback for script errors.",
            "line": " ../lib.js:1667"
        },
        {
            "message": "Missing item type\nMain entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "line": " ../lib.js:1682"
        },
        {
            "message": "Missing item type\nSupport require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "line": " ../lib.js:1732"
        },
        {
            "message": "Missing item type\nExecute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "line": " ../lib.js:1740"
        },
        {
            "message": "Missing item type\nExport require as a global, but only if it does not already exist.",
            "line": " ../lib.js:1750"
        },
        {
            "message": "Missing item type\nAny errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "line": " ../lib.js:1797"
        },
        {
            "message": "Missing item type\nCreates the node for the load command. Only used in browser envs.",
            "line": " ../lib.js:1804"
        },
        {
            "message": "Missing item type\nDoes the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "line": " ../lib.js:1817"
        },
        {
            "message": "Missing item type\nThe function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "line": " ../lib.js:1973"
        },
        {
            "message": "Missing item type\nExecutes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "line": " ../lib.js:2047"
        }
    ]
}